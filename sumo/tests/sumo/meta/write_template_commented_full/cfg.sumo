<?xml version="1.0" encoding="UTF-8"?>

<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://sumo.dlr.de/xsd/sumoConfiguration.xsd">

    <configuration>
        <!-- Loads the named config on startup -->
        <configuration-file value="" synonymes="c configuration" type="FILE"/>

        <!-- Saves current configuration into FILE -->
        <save-configuration value="" synonymes="save-config" type="FILE"/>

        <!-- Saves a configuration template (empty) into FILE -->
        <save-template value="" type="FILE"/>

        <!-- Saves the configuration schema into FILE -->
        <save-schema value="" type="FILE"/>

        <!-- Adds comments to saved template, configuration, or schema -->
        <save-commented value="" synonymes="save-template.commented" type="BOOL"/>

    </configuration>

    <input>
        <!-- Load road network description from FILE -->
        <net-file value="" synonymes="n net" type="FILE"/>

        <!-- Load routes descriptions from FILE(s) -->
        <route-files value="" synonymes="r routes" type="FILE"/>

        <!-- Load further descriptions from FILE(s) -->
        <additional-files value="" synonymes="a additional" type="FILE"/>

        <!-- Load edge/lane weights for online rerouting from FILE -->
        <weight-files value="" synonymes="w weights" type="FILE"/>

        <!-- Name of the xml attribute which gives the edge weight -->
        <weight-attribute value="traveltime" synonymes="measure x" type="STR"/>

        <!-- Loads a network state from FILE -->
        <load-state value="" type="FILE"/>

        <!-- Shifts all times loaded from a saved state by the given offset -->
        <load-state.offset value="0" type="TIME"/>

        <!-- Removes vehicles with the given IDs from the loaded state -->
        <load-state.remove-vehicles value="" type="STR"/>

    </input>

    <output>
        <!-- Prefix which is applied to all output files. The special string &apos;TIME&apos; is replaced by the current time. -->
        <output-prefix value="" type="STR"/>

        <!-- Defines the number of digits after the comma for floating point output -->
        <precision value="2" type="INT"/>

        <!-- Defines the number of digits after the comma for lon,lat output -->
        <precision.geo value="6" type="INT"/>

        <!-- Save complete network states into FILE -->
        <netstate-dump value="" synonymes="ndump netstate netstate-output" type="FILE"/>

        <!-- Write also empty edges completely when dumping -->
        <netstate-dump.empty-edges value="false" synonymes="dump-empty-edges netstate-output.empty-edges netstate.empty-edges" type="BOOL"/>

        <!-- Write positions and speeds with the given precision (default 2) -->
        <netstate-dump.precision value="2" synonymes="dump-precision netstate-output.precision netstate.precision" type="INT"/>

        <!-- Save the emission values of each vehicle -->
        <emission-output value="" type="FILE"/>

        <!-- Write emission values with the given precision (default 2) -->
        <emission-output.precision value="2" type="INT"/>

        <!-- Save the battery values of each vehicle -->
        <battery-output value="" type="FILE"/>

        <!-- Write battery values with the given precision (default 2) -->
        <battery-output.precision value="2" type="INT"/>

        <!-- Write data of charging stations -->
        <chargingstations-output value="" type="FILE"/>

        <!-- Save the Floating Car Data -->
        <fcd-output value="" type="FILE"/>

        <!-- Save the Floating Car Data using geo-coordinates (lon/lat) -->
        <fcd-output.geo value="false" type="BOOL"/>

        <!-- Add the vehicle signal state to the FCD output (brake lights etc.) -->
        <fcd-output.signals value="false" type="BOOL"/>

        <!-- Save a lot of information for each timestep (very redundant) -->
        <full-output value="" type="FILE"/>

        <!-- Save the vehicle queues at the junctions (experimental) -->
        <queue-output value="" type="FILE"/>

        <!-- Save complete vehicle positions inclusive speed values in the VTK Format (usage: /path/out will produce /path/out_$TIMESTEP$.vtp files) -->
        <vtk-output value="" type="FILE"/>

        <!-- Save the vehicle trajectories in the Amitran format -->
        <amitran-output value="" type="FILE"/>

        <!-- Save aggregated vehicle departure info into FILE -->
        <summary-output value="" synonymes="summary" type="FILE"/>

        <!-- Save single vehicle trip info into FILE -->
        <tripinfo-output value="" synonymes="tripinfo" type="FILE"/>

        <!-- Write tripinfo output for vehicles which have not arrived at simulation end -->
        <tripinfo-output.write-unfinished value="false" type="BOOL"/>

        <!-- Save single vehicle route info into FILE -->
        <vehroute-output value="" synonymes="vehroutes" type="FILE"/>

        <!-- Write the exit times for all edges -->
        <vehroute-output.exit-times value="false" synonymes="vehroutes.exit-times" type="BOOL"/>

        <!-- Write the last route only -->
        <vehroute-output.last-route value="false" synonymes="vehroutes.last-route" type="BOOL"/>

        <!-- Sorts the output by departure time -->
        <vehroute-output.sorted value="false" synonymes="vehroutes.sorted" type="BOOL"/>

        <!-- Write the output in the duarouter alternatives style -->
        <vehroute-output.dua value="false" synonymes="vehroutes.dua" type="BOOL"/>

        <!-- Write the output with the intended instead of the real departure time -->
        <vehroute-output.intended-depart value="false" synonymes="vehroutes.intended-depart" type="BOOL"/>

        <!-- Include total route length in the output -->
        <vehroute-output.route-length value="false" synonymes="vehroutes.route-length" type="BOOL"/>

        <!-- Write vehroute output for vehicles which have not arrived at simulation end -->
        <vehroute-output.write-unfinished value="false" type="BOOL"/>

        <!-- Skip vehroute output for public transport vehicles -->
        <vehroute-output.skip-ptlines value="false" type="BOOL"/>

        <!-- Save links states into FILE -->
        <link-output value="" type="FILE"/>

        <!-- Save bluetooth visibilities into FILE (in conjunction with device.btreceiver and device.btsender) -->
        <bt-output value="" type="FILE"/>

        <!-- Record lane changes and their motivations for all vehicles into FILE -->
        <lanechange-output value="" type="FILE"/>

        <!-- Record stops and loading/unloading of passenger and containers for all vehicles into FILE -->
        <stop-output value="" type="FILE"/>

        <!-- Use INT[] as times at which a network state written -->
        <save-state.times value="" type="INT[]"/>

        <!-- save state repeatedly after TIME period -->
        <save-state.period value="-1" type="TIME"/>

        <!-- Prefix for network states -->
        <save-state.prefix value="state" type="FILE"/>

        <!-- Suffix for network states (.sbx or .xml) -->
        <save-state.suffix value=".sbx" type="FILE"/>

        <!-- Files for network states -->
        <save-state.files value="" type="FILE"/>

    </output>

    <time>
        <!-- Defines the begin time in seconds; The simulation starts at this time -->
        <begin value="0" synonymes="b" type="TIME"/>

        <!-- Defines the end time in seconds; The simulation ends at this time -->
        <end value="-1" synonymes="e" type="TIME"/>

        <!-- Defines the step duration in seconds -->
        <step-length value="1" type="TIME"/>

    </time>

    <processing>
        <!-- Whether to use ballistic method for the positional update of vehicles (default is a semi-implicit Euler method). -->
        <step-method.ballistic value="false" type="BOOL"/>

        <!-- Defines the resolution in m when handling lateral positioning within a lane (with -1 all vehicles drive at the center of their lane -->
        <lateral-resolution value="-1" type="FLOAT"/>

        <!-- Select default car following model (Krauss, IDM, ...) -->
        <carfollow.model value="Krauss" synonymes="carfollowing.model" type="STR"/>

        <!-- Load routes for the next number of seconds ahead -->
        <route-steps value="200" synonymes="s" type="TIME"/>

        <!-- Disable (junction) internal links -->
        <no-internal-links value="false" type="BOOL"/>

        <!-- Ignore vehicles which block the junction after they have been standing for SECONDS (-1 means never ignore) -->
        <ignore-junction-blocker value="-1" type="TIME"/>

        <!-- Do not check whether routes are connected -->
        <ignore-route-errors value="false" type="BOOL"/>

        <!-- Do not check whether accidents occur -->
        <ignore-accidents value="false" type="BOOL"/>

        <!-- How to deal with collisions: [none,warn,teleport,remove] -->
        <collision.action value="teleport" type="STR"/>

        <!-- Let vehicle stop for TIME before performing collision.action (except for action &apos;none&apos;) -->
        <collision.stoptime value="0" type="TIME"/>

        <!-- Enables collisions checks on junctions -->
        <collision.check-junctions value="false" type="BOOL"/>

        <!-- Sets the fraction of minGap that must be maintained to avoid collision detection. -->
        <collision.mingap-factor value="1" type="FLOAT"/>

        <!-- Delay vehicle insertion to stay within the given maximum number -->
        <max-num-vehicles value="-1" type="INT"/>

        <!-- Abort the simulation if the given maximum number of teleports is exceeded -->
        <max-num-teleports value="-1" type="INT"/>

        <!-- Scale demand by the given factor (by discarding or duplicating vehicles) -->
        <scale value="1" type="FLOAT"/>

        <!-- Specify how long a vehicle may wait until being teleported, defaults to 300, non-positive values disable teleporting -->
        <time-to-teleport value="300" type="TIME"/>

        <!-- The waiting time after which vehicles on a fast road (speed &gt; 69m/s) are teleported if they are on a non-continuing lane -->
        <time-to-teleport.highways value="0" type="TIME"/>

        <!-- Length of time interval, over which accumulated waiting time is taken into account (default is 100s.) -->
        <waiting-time-memory value="100" type="TIME"/>

        <!-- How long vehicles wait for departure before being skipped, defaults to -1 which means vehicles are never skipped -->
        <max-depart-delay value="-1" type="TIME"/>

        <!-- Whether insertion on an edge shall not be repeated in same step once failed -->
        <sloppy-insert value="false" type="BOOL"/>

        <!-- Whether each vehicle is checked separately for insertion on an edge -->
        <eager-insert value="false" type="BOOL"/>

        <!-- Each vehicle receives a random offset to its depart value drawn uniformly from [0, TIME] -->
        <random-depart-offset value="0" type="TIME"/>

        <!-- Duration of a lane change maneuver (default 0) -->
        <lanechange.duration value="0" type="TIME"/>

        <!-- Whether overtaking on the right on motorways is permitted -->
        <lanechange.overtake-right value="false" type="BOOL"/>

        <!-- Switches off all traffic lights. -->
        <tls.all-off value="false" type="BOOL"/>

        <!-- Specify how long a vehicle may wait until impatience grows from 0 to 1, defaults to 300, non-positive values disable impatience growth -->
        <time-to-impatience value="300" type="TIME"/>

        <!-- Length of the default interval length between action points for the car-following and lane-change models (in seconds). If not specified, the simulation step-length is used per default. Vehicle- or VType-specific settings override the default. Must be a multiple of the simulation step-length. -->
        <default.action-step-length value="0" type="FLOAT"/>

        <!-- Select among pedestrian models [&apos;nonInteracting&apos;, &apos;striping&apos;, &apos;remote&apos;] -->
        <pedestrian.model value="striping" type="STR"/>

        <!-- Width of parallel stripes for segmenting a sidewalk (meters) for use with model &apos;striping&apos; -->
        <pedestrian.striping.stripe-width value="0.64" type="FLOAT"/>

        <!-- factor for random slow-downs [0,1] for use with model &apos;striping&apos; -->
        <pedestrian.striping.dawdling value="0.2" type="FLOAT"/>

        <!-- Time in seconds after which pedestrians start squeezing through a jam when using model &apos;striping&apos; (non-positive values disable squeezing) -->
        <pedestrian.striping.jamtime value="300" type="TIME"/>

        <!-- The address (host:port) of the external simulation -->
        <pedestrian.remote.address value="localhost:9000" type="STR"/>

    </processing>

    <routing>
        <!-- Select among routing algorithms [&apos;dijkstra&apos;, &apos;astar&apos;, &apos;CH&apos;, &apos;CHWrapper&apos;] -->
        <routing-algorithm value="dijkstra" type="STR"/>

        <!-- Edge weights for routing are dynamically disturbed by a random factor drawn uniformly from [1,FLOAT) -->
        <weights.random-factor value="1" type="FLOAT"/>

        <!-- Initialize lookup table for astar from the given file (generated by marouter --all-pairs-output) -->
        <astar.all-distances value="" type="FILE"/>

        <!-- Initialize lookup table for astar ALT-variant from the given file -->
        <astar.landmark-distances value="" type="FILE"/>

        <!-- Use FLOAT as a factor on pedestrian maximum speed during intermodal routing -->
        <persontrip.walkfactor value="0.9" type="FLOAT"/>

        <!-- The probability for a vehicle to have a &apos;rerouting&apos; device -->
        <device.rerouting.probability value="0" type="FLOAT"/>

        <!-- Assign a &apos;rerouting&apos; device to named vehicles -->
        <device.rerouting.explicit value="" synonymes="device.rerouting.knownveh" type="STR"/>

        <!-- The &apos;rerouting&apos; devices are set deterministic using a fraction of 1000 -->
        <device.rerouting.deterministic value="false" type="BOOL"/>

        <!-- The period with which the vehicle shall be rerouted -->
        <device.rerouting.period value="0" synonymes="device.routing.period" type="TIME"/>

        <!-- The rerouting period before depart -->
        <device.rerouting.pre-period value="1" synonymes="device.routing.pre-period" type="TIME"/>

        <!-- The weight of prior edge weights for exponential moving average -->
        <device.rerouting.adaptation-weight value="0.5" synonymes="device.routing.adaptation-weight" type="FLOAT"/>

        <!-- The number of steps for moving average weight of prior edge weights -->
        <device.rerouting.adaptation-steps value="0" synonymes="device.routing.adaptation-steps" type="INT"/>

        <!-- The interval for updating the edge weights -->
        <device.rerouting.adaptation-interval value="1" synonymes="device.routing.adaptation-interval" type="TIME"/>

        <!-- Use zones (districts) as routing start- and endpoints -->
        <device.rerouting.with-taz value="false" synonymes="device.routing.with-taz with-taz" type="BOOL"/>

        <!-- Use weight files given with option --weight-files for initializing edge weights -->
        <device.rerouting.init-with-loaded-weights value="false" type="BOOL"/>

        <!-- The number of parallel execution threads used for rerouting -->
        <device.rerouting.threads value="0" type="INT"/>

        <!-- Save adapting weights to FILE -->
        <device.rerouting.output value="" type="FILE"/>

    </routing>

    <report>
        <!-- Switches to verbose output -->
        <verbose value="false" synonymes="v" type="BOOL"/>

        <!-- Prints option values before processing -->
        <print-options value="false" type="BOOL"/>

        <!-- Prints this screen -->
        <help value="false" synonymes="?" type="BOOL"/>

        <!-- Prints the current version -->
        <version value="false" synonymes="V" type="BOOL"/>

        <!-- Set schema validation scheme of XML inputs (&quot;never&quot;, &quot;auto&quot; or &quot;always&quot;) -->
        <xml-validation value="auto" synonymes="X" type="STR"/>

        <!-- Set schema validation scheme of SUMO network inputs (&quot;never&quot;, &quot;auto&quot; or &quot;always&quot;) -->
        <xml-validation.net value="never" type="STR"/>

        <!-- Disables output of warnings -->
        <no-warnings value="false" synonymes="W suppress-warnings" type="BOOL"/>

        <!-- Writes all messages to FILE (implies verbose) -->
        <log value="" synonymes="l log-file" type="FILE"/>

        <!-- Writes all non-error messages to FILE (implies verbose) -->
        <message-log value="" type="FILE"/>

        <!-- Writes all warnings and errors to FILE -->
        <error-log value="" type="FILE"/>

        <!-- Disable performance reports for individual simulation steps -->
        <duration-log.disable value="false" synonymes="no-duration-log" type="BOOL"/>

        <!-- Enable statistics on vehicle trips -->
        <duration-log.statistics value="false" type="BOOL"/>

        <!-- Disable console output of current simulation step -->
        <no-step-log value="false" type="BOOL"/>

    </report>

    <emissions>
        <!-- Determines where to load PHEMlight definitions from. -->
        <phemlight-path value="./PHEMlight/" type="FILE"/>

        <!-- The probability for a vehicle to have a &apos;emissions&apos; device -->
        <device.emissions.probability value="0" type="FLOAT"/>

        <!-- Assign a &apos;emissions&apos; device to named vehicles -->
        <device.emissions.explicit value="" synonymes="device.emissions.knownveh" type="STR"/>

        <!-- The &apos;emissions&apos; devices are set deterministic using a fraction of 1000 -->
        <device.emissions.deterministic value="false" type="BOOL"/>

    </emissions>

    <communication>
        <!-- The probability for a vehicle to have a &apos;btreceiver&apos; device -->
        <device.btreceiver.probability value="0" type="FLOAT"/>

        <!-- Assign a &apos;btreceiver&apos; device to named vehicles -->
        <device.btreceiver.explicit value="" synonymes="device.btreceiver.knownveh" type="STR"/>

        <!-- The &apos;btreceiver&apos; devices are set deterministic using a fraction of 1000 -->
        <device.btreceiver.deterministic value="false" type="BOOL"/>

        <!-- The range of the bt receiver -->
        <device.btreceiver.range value="300" type="FLOAT"/>

        <!-- Whether all recognition point shall be written -->
        <device.btreceiver.all-recognitions value="false" type="BOOL"/>

        <!-- The offtime used for calculating detection probability (in seconds) -->
        <device.btreceiver.offtime value="0.64" type="FLOAT"/>

        <!-- The probability for a vehicle to have a &apos;btsender&apos; device -->
        <device.btsender.probability value="0" type="FLOAT"/>

        <!-- Assign a &apos;btsender&apos; device to named vehicles -->
        <device.btsender.explicit value="" synonymes="device.btsender.knownveh" type="STR"/>

        <!-- The &apos;btsender&apos; devices are set deterministic using a fraction of 1000 -->
        <device.btsender.deterministic value="false" type="BOOL"/>

    </communication>

    <battery>
        <!-- The probability for a vehicle to have a &apos;battery&apos; device -->
        <device.battery.probability value="0" type="FLOAT"/>

        <!-- Assign a &apos;battery&apos; device to named vehicles -->
        <device.battery.explicit value="" synonymes="device.battery.knownveh" type="STR"/>

        <!-- The &apos;battery&apos; devices are set deterministic using a fraction of 1000 -->
        <device.battery.deterministic value="false" type="BOOL"/>

    </battery>

    <example_device>
        <!-- The probability for a vehicle to have a &apos;example&apos; device -->
        <device.example.probability value="0" type="FLOAT"/>

        <!-- Assign a &apos;example&apos; device to named vehicles -->
        <device.example.explicit value="" synonymes="device.example.knownveh" type="STR"/>

        <!-- The &apos;example&apos; devices are set deterministic using a fraction of 1000 -->
        <device.example.deterministic value="false" type="BOOL"/>

        <!-- An exemplary parameter which can be used by all instances of the example device -->
        <device.example.parameter value="0" type="FLOAT"/>

    </example_device>

    <ssm_device>
        <!-- The probability for a vehicle to have a &apos;ssm&apos; device -->
        <device.ssm.probability value="0" type="FLOAT"/>

        <!-- Assign a &apos;ssm&apos; device to named vehicles -->
        <device.ssm.explicit value="" synonymes="device.ssm.knownveh" type="STR"/>

        <!-- The &apos;ssm&apos; devices are set deterministic using a fraction of 1000 -->
        <device.ssm.deterministic value="false" type="BOOL"/>

        <!-- Specifies which measures will be logged (as a space seperated sequence of IDs in (&apos;TTC&apos;, &apos;DRAC&apos;, &apos;PET&apos;)). -->
        <device.ssm.measures value="" type="STR"/>

        <!-- Specifies thresholds corresponding to the specified measures (see documentation and watch the order!). Only events exceeding the thresholds will be logged. -->
        <device.ssm.thresholds value="" type="STR"/>

        <!-- Specifies whether trajectories will be logged (if false, only the extremal values and times are reported, this is the default). -->
        <device.ssm.trajectories value="false" type="BOOL"/>

        <!-- Specifies the detection range in meters (default is 50.00m.). For vehicles below this distance from the equipped vehicle, SSM values are traced. -->
        <device.ssm.range value="50" type="FLOAT"/>

        <!-- Specifies the time in seconds to be logged after a conflict is over (default is 5.00secs.). Required &gt;0 if PET is to be calculated for crossing conflicts. -->
        <device.ssm.extratime value="5" type="FLOAT"/>

        <!-- Whether to use coordinates of the original reference system in output (default is false). -->
        <device.ssm.geo value="false" type="BOOL"/>

    </ssm_device>

    <bluelight_device>
        <!-- The probability for a vehicle to have a &apos;bluelight&apos; device -->
        <device.bluelight.probability value="0" type="FLOAT"/>

        <!-- Assign a &apos;bluelight&apos; device to named vehicles -->
        <device.bluelight.explicit value="" synonymes="device.bluelight.knownveh" type="STR"/>

        <!-- The &apos;bluelight&apos; devices are set deterministic using a fraction of 1000 -->
        <device.bluelight.deterministic value="false" type="BOOL"/>

        <!-- An exemplary parameter which can be used by all instances of the example device -->
        <device.bluelight.parameter value="0" type="FLOAT"/>

    </bluelight_device>

    <traci_server>
        <!-- Enables TraCI Server if set -->
        <remote-port value="0" type="INT"/>

        <!-- Expected number of connecting clients -->
        <num-clients value="1" type="INT"/>

        <!-- Runs TraCI script with embedded python -->
        <python-script value="" type="STR"/>

    </traci_server>

    <mesoscopic>
        <!-- Enables mesoscopic simulation -->
        <mesosim value="false" type="BOOL"/>

        <!-- Length of an edge segment in mesoscopic simulation -->
        <meso-edgelength value="98" type="FLOAT"/>

        <!-- Factor for calculating the net free-free headway time -->
        <meso-tauff value="1.13" type="TIME"/>

        <!-- Factor for calculating the net free-jam headway time -->
        <meso-taufj value="1.13" type="TIME"/>

        <!-- Factor for calculating the jam-free headway time -->
        <meso-taujf value="1.73" type="TIME"/>

        <!-- Factor for calculating the jam-jam headway time -->
        <meso-taujj value="1.4" type="TIME"/>

        <!-- Minimum percentage of occupied space to consider a segment jammed. A negative argument causes thresholds to be computed based on edge speed and tauff (default) -->
        <meso-jam-threshold value="-1" type="FLOAT"/>

        <!-- Enable multiple queues at edge ends -->
        <meso-multi-queue value="true" type="BOOL"/>

        <!-- Enable mesoscopic traffic light and priority junction handling -->
        <meso-junction-control value="false" type="BOOL"/>

        <!-- Enable mesoscopic traffic light and priority junction handling for saturated links. This prevents faulty traffic lights from hindering flow in low-traffic situations -->
        <meso-junction-control.limited value="false" type="BOOL"/>

        <!-- Apply scaled time penalties when driving across tls controlled junctions based on green split instead of checking actual phases -->
        <meso-tls-penalty value="0" type="FLOAT"/>

        <!-- Apply fixed time penalty when driving across a minor link. When using --meso-junction-control.limited, the penalty is not applied whenever limited control is active. -->
        <meso-minor-penalty value="0" type="TIME"/>

        <!-- Enable mesoscopic overtaking -->
        <meso-overtaking value="false" type="BOOL"/>

        <!-- Time interval for rechecking insertion into the next segment after failure -->
        <meso-recheck value="0" type="TIME"/>

    </mesoscopic>

    <random_number>
        <!-- Initialises the random number generator with the current system time -->
        <random value="false" synonymes="abs-rand" type="BOOL"/>

        <!-- Initialises the random number generator with the given value -->
        <seed value="23423" synonymes="srand" type="INT"/>

    </random_number>

    <gui_only>
        <!-- Load visualisation settings from FILE -->
        <gui-settings-file value="" type="FILE"/>

        <!-- Quits the GUI when the simulation stops -->
        <quit-on-end value="false" synonymes="Q" type="BOOL"/>

        <!-- Start the GUI in gaming mode -->
        <game value="false" synonymes="G" type="BOOL"/>

        <!-- Start the simulation after loading -->
        <start value="false" synonymes="S" type="BOOL"/>

        <!-- Restart the simulation after ending (demo mode) -->
        <demo value="false" synonymes="D" type="BOOL"/>

        <!-- Do not load background pictures -->
        <disable-textures value="false" synonymes="T" type="BOOL"/>

        <!-- Create initial window with the given x,y size -->
        <window-size value="" type="STR"/>

        <!-- Create initial window at the given x,y position -->
        <window-pos value="" type="STR"/>

        <!-- The aggregation period for value tracker windows -->
        <tracker-interval value="1" type="FLOAT"/>

        <!-- Enable ovelay for screen recognition -->
        <gui-testing value="false" type="BOOL"/>

        <!-- Enable output messages during GUI-Testing -->
        <gui-testing-debug value="false" type="BOOL"/>

    </gui_only>

</configuration>
