<?xml version="1.0" encoding="UTF-8"?>

<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://sumo.dlr.de/xsd/netconvertConfiguration.xsd">

    <configuration>
        <!-- Loads the named config on startup -->
        <configuration-file value="" synonymes="c configuration" type="FILE"/>

        <!-- Saves current configuration into FILE -->
        <save-configuration value="" synonymes="save-config" type="FILE"/>

        <!-- Saves a configuration template (empty) into FILE -->
        <save-template value="" type="FILE"/>

        <!-- Saves the configuration schema into FILE -->
        <save-schema value="" type="FILE"/>

        <!-- Adds comments to saved template, configuration, or schema -->
        <save-commented value="" synonymes="save-template.commented" type="BOOL"/>

    </configuration>

    <input>
        <!-- Read SUMO-net from FILE -->
        <sumo-net-file value="" synonymes="s sumo-net" type="FILE"/>

        <!-- Read XML-node defs from FILE -->
        <node-files value="" synonymes="n nodes xml-node-files xml-nodes" type="FILE"/>

        <!-- Read XML-edge defs from FILE -->
        <edge-files value="" synonymes="e edges xml-edge-files xml-edges" type="FILE"/>

        <!-- Read XML-connection defs from FILE -->
        <connection-files value="" synonymes="connections x xml-connection-files xml-connections" type="FILE"/>

        <!-- Read XML-traffic light defs from FILE -->
        <tllogic-files value="" synonymes="i" type="FILE"/>

        <!-- Read XML-type defs from FILE -->
        <type-files value="" synonymes="t types xml-type-files xml-types" type="FILE"/>

        <!-- Read shapefiles (ArcView, Tiger, ...) from files starting with &apos;FILE&apos; -->
        <shapefile-prefix value="" synonymes="arcview shapefile tiger" type="FILE"/>

        <!-- Read converted Navteq GDF data (unsplitted Elmar-network) from path &apos;FILE&apos; -->
        <dlr-navteq-prefix value="" synonymes="dlr-navteq elmar2" type="FILE"/>

        <!-- Read OSM-network from path &apos;FILE(s)&apos; -->
        <osm-files value="" synonymes="osm" type="FILE"/>

        <!-- Read OpenDRIVE-network from FILE -->
        <opendrive-files value="" synonymes="opendrive" type="FILE"/>

        <!-- Read VISUM-net from FILE -->
        <visum-file value="" synonymes="visum" type="FILE"/>

        <!-- Read VISSIM-net from FILE -->
        <vissim-file value="" synonymes="vissim" type="FILE"/>

        <!-- Read RoboCup-net from DIR -->
        <robocup-dir value="" synonymes="robocup robocup-net" type="FILE"/>

        <!-- Read MATsim-net from FILE -->
        <matsim-files value="" synonymes="matsim" type="FILE"/>

        <!-- Read ITSUMO-net from FILE -->
        <itsumo-files value="" synonymes="itsumo" type="FILE"/>

        <!-- Read heightmap from ArcGIS shapefile -->
        <heightmap.shapefiles value="" type="FILE"/>

        <!-- Read heightmap from GeoTIFF -->
        <heightmap.geotiff value="" type="FILE"/>

    </input>

    <output>
        <!-- Prefix which is applied to all output files. The special string &apos;TIME&apos; is replaced by the current time. -->
        <output-prefix value="" type="STR"/>

        <!-- Defines the number of digits after the comma for floating point output -->
        <precision value="2" type="INT"/>

        <!-- Defines the number of digits after the comma for lon,lat output -->
        <precision.geo value="6" type="INT"/>

        <!-- The generated net will be written to FILE -->
        <output-file value="" synonymes="o output sumo-output" type="FILE"/>

        <!-- Prefix of files to write plain xml nodes, edges and connections to -->
        <plain-output-prefix value="" synonymes="plain plain-output" type="FILE"/>

        <!-- Writes information about joined junctions to FILE (can be loaded as additional node-file to reproduce joins -->
        <junctions.join-output value="" type="FILE"/>

        <!-- The generated net will be written to FILE using Amitran format -->
        <amitran-output value="" type="FILE"/>

        <!-- The generated net will be written to FILE using MATsim format -->
        <matsim-output value="" type="FILE"/>

        <!-- The generated net will be written to FILE using OpenDRIVE format -->
        <opendrive-output value="" type="FILE"/>

        <!-- The generated net will be written to dlr-navteq files with the given PREFIX -->
        <dlr-navteq-output value="" type="FILE"/>

        <!-- The network coordinates are written with the specified level of output precision -->
        <dlr-navteq.precision value="2" type="INT"/>

        <!-- Street names will be included in the output (if available) -->
        <output.street-names value="false" type="BOOL"/>

        <!-- Writes original names, if given, as parameter -->
        <output.original-names value="false" type="BOOL"/>

        <!-- Writes street signs as POIs to FILE -->
        <street-sign-output value="" type="FILE"/>

        <!-- Writes public transport stops to FILE -->
        <ptstop-output value="" type="FILE"/>

        <!-- Writes public transport lines to FILE -->
        <ptline-output value="" type="FILE"/>

        <!-- Builds parameterized curves whenever the angular change  between straight segments exceeds FLOAT degrees -->
        <opendrive-output.straight-threshold value="1e-08" type="FLOAT"/>

    </output>

    <projection>
        <!-- Uses a simple method for projection -->
        <simple-projection value="false" synonymes="proj.simple" type="BOOL"/>

        <!-- Scaling factor for input coordinates -->
        <proj.scale value="1" type="FLOAT"/>

        <!-- Determine the UTM zone (for a universal transversal mercator projection based on the WGS84 ellipsoid) -->
        <proj.utm value="false" type="BOOL"/>

        <!-- Determine the DHDN zone (for a transversal mercator projection based on the bessel ellipsoid, &quot;Gauss-Krueger&quot;) -->
        <proj.dhdn value="false" type="BOOL"/>

        <!-- Uses STR as proj.4 definition for projection -->
        <proj value="!" type="STR"/>

        <!-- Inverses projection -->
        <proj.inverse value="false" type="BOOL"/>

        <!-- Convert from Gauss-Krueger to UTM -->
        <proj.dhdnutm value="false" type="BOOL"/>

        <!-- Write geo coordinates in plain-xml -->
        <proj.plain-geo value="false" type="BOOL"/>

    </projection>

    <tls_building>
        <!-- Does not instatiate traffic lights loaded from other formats than XML -->
        <tls.discard-loaded value="false" type="BOOL"/>

        <!-- Does not instatiate traffic lights at geometry-like nodes loaded from other formats than XML -->
        <tls.discard-simple value="false" type="BOOL"/>

        <!-- Interprets STR as list of junctions to be controlled by TLS -->
        <tls.set value="" synonymes="explicite-tls" type="STR"/>

        <!-- Interprets STR as list of junctions to be not controlled by TLS -->
        <tls.unset value="" synonymes="explicite-no-tls" type="STR"/>

        <!-- Turns on TLS guessing -->
        <tls.guess value="false" synonymes="guess-tls" type="BOOL"/>

        <!-- Sets district nodes as tls-controlled -->
        <tls.taz-nodes value="false" synonymes="tls-guess.district-nodes" type="BOOL"/>

        <!-- Includes node clusters into guess -->
        <tls-guess.joining value="false" type="BOOL"/>

        <!-- Tries to cluster tls-controlled nodes -->
        <tls.join value="false" synonymes="try-join-tls" type="BOOL"/>

        <!-- Determines the maximal distance for joining traffic lights (defaults to 20) -->
        <tls.join-dist value="20" type="FLOAT"/>

        <!-- Do not control edges that lie fully within a joined traffic light. This may cause collisions but allows old traffic light plans to be used -->
        <tls.uncontrolled-within value="false" type="BOOL"/>

        <!-- Interprets tls nodes surrounding an intersection as signal positions for a larger TLS. This is typical pattern for OSM-derived networks -->
        <tls.guess-signals value="false" type="BOOL"/>

        <!-- Distance for interpreting nodes as signal locations -->
        <tls.guess-signals.dist value="25" type="FLOAT"/>

        <!-- Use INT as cycle duration -->
        <tls.cycle.time value="90" type="INT"/>

        <!-- Use INT as green phase duration -->
        <tls.green.time value="31" synonymes="traffic-light-green" type="INT"/>

        <!-- Defines smallest vehicle deceleration -->
        <tls.yellow.min-decel value="3" synonymes="D min-decel" type="FLOAT"/>

        <!-- Given yellow times are patched even if being too short -->
        <tls.yellow.patch-small value="false" synonymes="patch-small-tyellow" type="BOOL"/>

        <!-- Set INT as fixed time for yellow phase durations -->
        <tls.yellow.time value="-1" synonymes="traffic-light-yellow" type="INT"/>

        <!-- Set INT as fixed time for red phase duration at traffic lights that do not have a conflicting flow -->
        <tls.red.time value="5" type="INT"/>

        <!-- Set INT as fixed time for intermediate red phase after every switch -->
        <tls.allred.time value="0" type="INT"/>

        <!-- Use INT as green phase duration for left turns (s). Setting this value to 0 disables additional left-turning phases -->
        <tls.left-green.time value="6" type="INT"/>

        <!-- TLSs in STR will be shifted by half-phase -->
        <tls.half-offset value="" synonymes="tl-logics.half-offset" type="STR"/>

        <!-- TLSs in STR will be shifted by quarter-phase -->
        <tls.quarter-offset value="" synonymes="tl-logics.quarter-offset" type="STR"/>

        <!-- TLSs with unspecified type will use STR as their algorithm -->
        <tls.default-type value="static" type="STR"/>

        <!-- Default minimum phase duration for traffic lights with variable phase length -->
        <tls.min-dur value="5" type="INT"/>

        <!-- Default maximum phase duration for traffic lights with variable phase length -->
        <tls.max-dur value="50" type="INT"/>

    </tls_building>

    <ramp_guessing>
        <!-- Enable ramp-guessing -->
        <ramps.guess value="false" synonymes="guess-ramps" type="BOOL"/>

        <!-- Treat edges with speed &gt; FLOAT as no ramps -->
        <ramps.max-ramp-speed value="-1" synonymes="ramp-guess.max-ramp-speed" type="FLOAT"/>

        <!-- Treat edges with speed &lt; FLOAT as no highways -->
        <ramps.min-highway-speed value="21.9444" synonymes="ramp-guess.min-highway-speed" type="FLOAT"/>

        <!-- Use FLOAT as ramp-length -->
        <ramps.ramp-length value="100" synonymes="ramp-guess.ramp-length" type="FLOAT"/>

        <!-- Tries to handle the given edges as ramps -->
        <ramps.set value="" synonymes="ramp-guess.explicite" type="STR"/>

        <!-- Do not consider the given edges as ramps -->
        <ramps.unset value="" type="STR"/>

        <!-- Avoids edge splitting -->
        <ramps.no-split value="false" synonymes="ramp-guess.no-split" type="BOOL"/>

    </ramp_guessing>

    <edge_removal>
        <!-- Only keep edges with speed in meters/second &gt; FLOAT -->
        <keep-edges.min-speed value="-1" synonymes="edges-min-speed" type="FLOAT"/>

        <!-- Remove edges in STR -->
        <remove-edges.explicit value="" synonymes="remove-edges" type="STR"/>

        <!-- Only keep edges in STR or those which are kept due to other keep-edges or remove-edges options -->
        <keep-edges.explicit value="" synonymes="keep-edges" type="STR"/>

        <!-- Only keep edges in FILE (Each id on a single line. Selection files from SUMO-GUI are also supported) or those which are kept due to other keep-edges or remove-edges options -->
        <keep-edges.input-file value="" type="FILE"/>

        <!-- Remove edges in FILE. (Each id on a single line. Selection files from SUMO-GUI are also supported) -->
        <remove-edges.input-file value="" type="FILE"/>

        <!-- Remove edges after joining -->
        <keep-edges.postload value="false" type="BOOL"/>

        <!-- Only keep edges which are located within the given boundary (given either as CARTESIAN corner coordinates &lt;xmin,ymin,xmax,ymax&gt; or as polygon &lt;x0,y0,x1,y1,...&gt;) -->
        <keep-edges.in-boundary value="" type="STR"/>

        <!-- Only keep edges which are located within the given boundary (given either as GEODETIC corner coordinates &lt;lon-min,lat-min,lon-max,lat-max&gt; or as polygon &lt;lon0,lat0,lon1,lat1,...&gt;) -->
        <keep-edges.in-geo-boundary value="" type="STR"/>

        <!-- Only keep edges which allow one of the vclasss in STR -->
        <keep-edges.by-vclass value="" type="STR"/>

        <!-- Remove edges which allow only vclasses from STR -->
        <remove-edges.by-vclass value="" type="STR"/>

        <!-- Only keep edges where type is in STR -->
        <keep-edges.by-type value="" type="STR"/>

        <!-- Only keep the INT largest weakly connected compoonents -->
        <keep-edges.components value="0" type="INT"/>

        <!-- Remove edges where type is in STR -->
        <remove-edges.by-type value="" type="STR"/>

        <!-- Removes isolated edges -->
        <remove-edges.isolated value="false" synonymes="remove-isolated" type="BOOL"/>

    </edge_removal>

    <unregulated_nodes>
        <!-- All nodes will be unregulated -->
        <keep-nodes-unregulated value="false" synonymes="keep-unregulated" type="BOOL"/>

        <!-- Do not regulate nodes in STR -->
        <keep-nodes-unregulated.explicit value="" synonymes="keep-unregulated.explicit keep-unregulated.nodes" type="STR"/>

        <!-- Do not regulate district nodes -->
        <keep-nodes-unregulated.district-nodes value="false" synonymes="keep-unregulated.district-nodes" type="BOOL"/>

    </unregulated_nodes>

    <processing>
        <!-- Continue on broken input -->
        <ignore-errors value="false" synonymes="dismiss-loading-errors" type="BOOL"/>

        <!-- Continue on invalid connections -->
        <ignore-errors.connections value="false" type="BOOL"/>

        <!-- Show errors in connections at parsing -->
        <show-errors.connections-first-try value="false" type="BOOL"/>

        <!-- Continue on unknown edge types -->
        <ignore-errors.edge-type value="false" type="BOOL"/>

        <!-- The factor for flow to no. lanes conversion -->
        <lanes-from-capacity.norm value="1800" synonymes="capacity-norm" type="FLOAT"/>

        <!-- vmax is parsed as given in km/h (some) -->
        <speed-in-kmh value="false" type="BOOL"/>

        <!-- Use YYYY-MM-DD date to determine the readiness of features under construction -->
        <construction-date value="" type="STR"/>

        <!-- If edge shapes do not end at the node positions, extend them -->
        <plain.extend-edge-shape value="false" synonymes="xml.keep-shape" type="BOOL"/>

        <!-- The edge lengths given in the MATSIM-file will be kept -->
        <matsim.keep-length value="false" type="BOOL"/>

        <!-- The lane number will be computed from the capacity -->
        <matsim.lanes-from-capacity value="false" type="BOOL"/>

        <!-- Read edge ids from column STR -->
        <shapefile.street-id value="" synonymes="arcview.street-id" type="STR"/>

        <!-- Read from-node ids from column STR -->
        <shapefile.from-id value="" synonymes="arcview.from-id" type="STR"/>

        <!-- Read to-node ids from column STR -->
        <shapefile.to-id value="" synonymes="arcview.to-id" type="STR"/>

        <!-- Read type ids from column STR -->
        <shapefile.type-id value="" synonymes="arcview.type-id" type="STR"/>

        <!-- Uses edge type defaults on problems -->
        <shapefile.use-defaults-on-failure value="false" synonymes="arcview.use-defaults-on-failure" type="BOOL"/>

        <!-- Insert edges in both directions -->
        <shapefile.all-bidirectional value="false" synonymes="arcview.all-bidi shapefile.all-bidi" type="BOOL"/>

        <!-- Guess the proper projection -->
        <shapefile.guess-projection value="false" synonymes="arcview.guess-projection" type="BOOL"/>

        <!-- Structure join offset -->
        <vissim.join-distance value="5" synonymes="vissim.offset" type="FLOAT"/>

        <!-- Use FLOAT as default speed -->
        <vissim.default-speed value="50" type="FLOAT"/>

        <!-- Factor for edge velocity -->
        <vissim.speed-norm value="1" type="FLOAT"/>

        <!-- Writes lanes without an explicit speed set -->
        <vissim.report-unset-speeds value="false" type="BOOL"/>

        <!-- Uses priorities from types -->
        <visum.use-type-priority value="false" type="BOOL"/>

        <!-- Uses lane numbers from types -->
        <visum.use-type-laneno value="false" type="BOOL"/>

        <!-- Uses speeds from types -->
        <visum.use-type-speed value="false" type="BOOL"/>

        <!-- Sets connector speed -->
        <visum.connector-speeds value="100" type="FLOAT"/>

        <!-- Sets connector lane number -->
        <visum.connectors-lane-number value="3" synonymes="visum.connector-laneno" type="INT"/>

        <!-- Excludes connectors -->
        <visum.no-connectors value="false" type="BOOL"/>

        <!-- Computes the number of lanes from the edges&apos; capacities -->
        <visum.recompute-lane-number value="false" synonymes="visum.recompute-laneno" type="BOOL"/>

        <!-- Prints all warnings, some of which are due to VISUM misbehaviour -->
        <visum.verbose-warnings value="false" type="BOOL"/>

        <!-- Skips the check for duplicate nodes and edges -->
        <osm.skip-duplicates-check value="false" type="BOOL"/>

        <!-- Imports elevation data -->
        <osm.elevation value="false" type="BOOL"/>

        <!-- Reconstruct (relative) elevation based on layer data. Each layer is raised by FLOAT m -->
        <osm.layer-elevation value="0" type="FLOAT"/>

        <!-- Maximum grade threshold in % at 50km/h when reconstrucing elevation based on layer data. The value is scaled according to road speed. -->
        <osm.layer-elevation.max-grade value="10" type="FLOAT"/>

        <!-- Whether one-way roads should be spread to the side instead of centered -->
        <osm.oneway-spread-right value="false" type="BOOL"/>

        <!-- The default length of a public transport stop in FLOAT m -->
        <osm.stop-output.length value="25" type="FLOAT"/>

        <!-- The default length of a bus stop in FLOAT m -->
        <osm.stop-output.length.bus value="15" type="FLOAT"/>

        <!-- The default length of a tram stop in FLOAT m -->
        <osm.stop-output.length.tram value="25" type="FLOAT"/>

        <!-- The default length of a train stop in FLOAT m -->
        <osm.stop-output.length.train value="200" type="FLOAT"/>

        <!-- Whether additional attributes shall be imported -->
        <osm.all-attributes value="false" type="BOOL"/>

        <!-- Imports all lane types -->
        <opendrive.import-all-lanes value="false" type="BOOL"/>

        <!-- Whether lane widths shall be ignored. -->
        <opendrive.ignore-widths value="false" type="BOOL"/>

        <!-- The geometry resolution in m when importing curved geometries as line segments. -->
        <opendrive.curve-resolution value="2" type="FLOAT"/>

        <!-- Allow stop lines to be built beyond the start of the junction if the geometries allow so -->
        <opendrive.advance-stopline value="12" type="FLOAT"/>

        <!-- The minimum lane width for determining start or end of variable-width lanes -->
        <opendrive.min-width value="1.8" type="FLOAT"/>

        <!-- Omits internal links -->
        <no-internal-links value="false" type="BOOL"/>

        <!-- Remaps alphanumerical IDs of nodes and edges to ensure that all IDs are integers -->
        <numerical-ids value="false" type="BOOL"/>

        <!-- Ensures that generated ids do not included any of the typed IDs from FILE (SUMO-GUI selection file format) -->
        <reserved-ids value="" type="FILE"/>

        <!-- Removes vehicle class restrictions from imported edges -->
        <dismiss-vclasses value="false" type="BOOL"/>

        <!-- Disables building turnarounds -->
        <no-turnarounds value="false" type="BOOL"/>

        <!-- Disables building turnarounds at tls-controlled junctions -->
        <no-turnarounds.tls value="false" synonymes="no-tls-turnarounds" type="BOOL"/>

        <!-- Disables building connections to left -->
        <no-left-connections value="false" type="BOOL"/>

        <!-- Splits edges across geometry nodes -->
        <geometry.split value="false" synonymes="split-geometry" type="BOOL"/>

        <!-- Replace nodes which only define edge geometry by geometry points (joins edges) -->
        <geometry.remove value="false" synonymes="R remove-geometry" type="BOOL"/>

        <!-- Ensure that the given list of edges is not modified -->
        <geometry.remove.keep-edges.explicit value="" type="STR"/>

        <!-- Ensure that the edges in FILE are not modified (Each id on a single line. Selection files from SUMO-GUI are also supported) -->
        <geometry.remove.keep-edges.input-file value="" type="FILE"/>

        <!-- splits geometry to restrict segment length -->
        <geometry.max-segment-length value="0" type="FLOAT"/>

        <!-- reduces too similar geometry points -->
        <geometry.min-dist value="-1" type="FLOAT"/>

        <!-- Warn about edge geometries with an angle above DEGREES in successive segments -->
        <geometry.max-angle value="99" type="FLOAT"/>

        <!-- Warn about edge geometries with a turning radius less than METERS at the start or end -->
        <geometry.min-radius value="9" type="FLOAT"/>

        <!-- Straighten edge geometries to avoid turning radii less than geometry.min-radius -->
        <geometry.min-radius.fix value="false" type="BOOL"/>

        <!-- Warn if the junction shape is to far away from the original node position -->
        <geometry.junction-mismatch-threshold value="20" type="FLOAT"/>

        <!-- Warn if edges overlap by more than the given threshold value -->
        <geometry.check-overlap value="0" type="FLOAT"/>

        <!-- Ignore overlapping edges if they are separated vertically by the given threshold. -->
        <geometry.check-overlap.vertical-threshold value="4" type="FLOAT"/>

        <!-- Warn about edge geometries with a grade in % above FLOAT. The threshold applies to roads with a speed limit of 50km/h and is scaled according to road speed. -->
        <geometry.max-grade value="10" type="FLOAT"/>

        <!-- Turn off normalizing node positions -->
        <offset.disable-normalization value="false" synonymes="disable-normalize-node-positions" type="BOOL"/>

        <!-- Adds FLOAT to net x-positions -->
        <offset.x value="0" synonymes="x-offset-to-apply" type="FLOAT"/>

        <!-- Adds FLOAT to net y-positions -->
        <offset.y value="0" synonymes="y-offset-to-apply" type="FLOAT"/>

        <!-- Flips the y-coordinate along zero -->
        <flip-y-axis value="false" synonymes="flip-y" type="BOOL"/>

        <!-- Enable roundabout-guessing -->
        <roundabouts.guess value="false" synonymes="guess-roundabouts" type="BOOL"/>

        <!-- Enable guessing of opposite direction lanes usable for overtaking -->
        <opposites.guess value="false" type="BOOL"/>

        <!-- Ensure that opposite edges have the same length -->
        <opposites.guess.fix-lengths value="false" type="BOOL"/>

        <!-- Assumes left-hand traffic on the network -->
        <lefthand value="false" type="BOOL"/>

        <!-- Merges edges which connect the same nodes and are close to each other (recommended for VISSIM import) -->
        <edges.join value="false" type="BOOL"/>

        <!-- Joins junctions that are close to each other (recommended for OSM import) -->
        <junctions.join value="false" type="BOOL"/>

        <!-- Determines the maximal distance for joining junctions (defaults to 10) -->
        <junctions.join-dist value="10" type="FLOAT"/>

        <!-- Interprets STR as list of junctions to exclude from joining -->
        <junctions.join-exclude value="" type="STR"/>

        <!-- Modifies all edge speeds by adding FLOAT -->
        <speed.offset value="0" type="FLOAT"/>

        <!-- Modifies all edge speeds by multiplying by FLOAT -->
        <speed.factor value="1" type="FLOAT"/>

        <!-- Modifies all edge speeds to at least FLOAT -->
        <speed.minimum value="0" type="FLOAT"/>

        <!-- Generate INT intermediate points to smooth out intersection corners -->
        <junctions.corner-detail value="0" type="INT"/>

        <!-- Generate INT intermediate points to smooth out lanes within the intersection -->
        <junctions.internal-link-detail value="5" type="INT"/>

        <!-- Generate longer intersections to allow for smooth s-curves when the number of lanes changes -->
        <junctions.scurve-stretch value="0" type="FLOAT"/>

        <!-- Builds common edges for turning connections with common from- and to-edge. This causes discrepancies between geometrical length and assigned length due to averaging but enables lane-changing while turning -->
        <junctions.join-turns value="false" type="BOOL"/>

        <!-- Forces rectangular cuts between lanes and intersections -->
        <rectangular-lane-cut value="false" type="BOOL"/>

        <!-- Allow driving onto a multi-lane road if there are foes on other lanes (at roundabouts) -->
        <check-lane-foes.roundabout value="true" type="BOOL"/>

        <!-- Allow driving onto a multi-lane road if there are foes on other lanes (everywhere) -->
        <check-lane-foes.all value="false" type="BOOL"/>

        <!-- Guess pedestrian sidewalks based on edge speed -->
        <sidewalks.guess value="false" type="BOOL"/>

        <!-- Add sidewalks for edges with a speed equal or below the given limit -->
        <sidewalks.guess.max-speed value="13.89" type="FLOAT"/>

        <!-- Add sidewalks for edges with a speed above the given limit -->
        <sidewalks.guess.min-speed value="5.8" type="FLOAT"/>

        <!-- Add sidewalks for edges that allow pedestrians on any of their lanes regardless of speed -->
        <sidewalks.guess.from-permissions value="false" type="BOOL"/>

        <!-- Do not guess sidewalks for the given list of edges -->
        <sidewalks.guess.exclude value="" type="STR"/>

        <!-- Guess pedestrian crossings based on the presence of sidewalks -->
        <crossings.guess value="false" type="BOOL"/>

        <!-- At uncontrolled nodes, do not build crossings across edges with a speed above the threshold -->
        <crossings.guess.speed-threshold value="13.89" type="FLOAT"/>

        <!-- Always build walking areas even if there are no crossings -->
        <walkingareas value="false" type="BOOL"/>

    </processing>

    <building_defaults>
        <!-- The default number of lanes in an edge -->
        <default.lanenumber value="1" synonymes="L lanenumber" type="INT"/>

        <!-- The default width of lanes -->
        <default.lanewidth value="-1" synonymes="lanewidth" type="FLOAT"/>

        <!-- The default speed on an edge (in m/s) -->
        <default.speed value="13.9" synonymes="S speed" type="FLOAT"/>

        <!-- The default priority of an edge -->
        <default.priority value="-1" synonymes="P priority" type="INT"/>

        <!-- The default width of added sidewalks -->
        <default.sidewalk-width value="2" type="FLOAT"/>

        <!-- The default for disallowed vehicle classes -->
        <default.disallow value="" type="STR"/>

        <!-- Whether junctions should be kept clear by default -->
        <default.junctions.keep-clear value="true" type="BOOL"/>

        <!-- The default turning radius of intersections -->
        <default.junctions.radius value="1.5" type="FLOAT"/>

    </building_defaults>

    <report>
        <!-- Switches to verbose output -->
        <verbose value="false" synonymes="v" type="BOOL"/>

        <!-- Prints option values before processing -->
        <print-options value="false" type="BOOL"/>

        <!-- Prints this screen -->
        <help value="false" synonymes="?" type="BOOL"/>

        <!-- Prints the current version -->
        <version value="false" synonymes="V" type="BOOL"/>

        <!-- Set schema validation scheme of XML inputs (&quot;never&quot;, &quot;auto&quot; or &quot;always&quot;) -->
        <xml-validation value="auto" synonymes="X" type="STR"/>

        <!-- Set schema validation scheme of SUMO network inputs (&quot;never&quot;, &quot;auto&quot; or &quot;always&quot;) -->
        <xml-validation.net value="never" type="STR"/>

        <!-- Disables output of warnings -->
        <no-warnings value="false" synonymes="W suppress-warnings" type="BOOL"/>

        <!-- Writes all messages to FILE (implies verbose) -->
        <log value="" synonymes="l log-file" type="FILE"/>

        <!-- Writes all non-error messages to FILE (implies verbose) -->
        <message-log value="" type="FILE"/>

        <!-- Writes all warnings and errors to FILE -->
        <error-log value="" type="FILE"/>

    </report>

    <random_number>
        <!-- Initialises the random number generator with the current system time -->
        <random value="false" synonymes="abs-rand" type="BOOL"/>

        <!-- Initialises the random number generator with the given value -->
        <seed value="23423" synonymes="srand" type="INT"/>

    </random_number>

</configuration>
